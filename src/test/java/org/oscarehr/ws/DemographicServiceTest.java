/**
 * Copyright (c) 2001-2002. Department of Family Medicine, McMaster University. All Rights Reserved.
 * This software is published under the GPL GNU General Public License.
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 * This software was written for the
 * Department of Family Medicine
 * McMaster University
 * Hamilton
 * Ontario, Canada
 */
package org.oscarehr.ws;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.junit.Test;
import org.oscarehr.ws.rest.DemographicMergeService;
import org.oscarehr.ws.rest.DemographicService;
import org.oscarehr.ws.rest.response.RestResponse;
import org.oscarehr.ws.rest.to.OscarSearchResponse;
import org.oscarehr.ws.rest.to.model.DemographicMergedTo1;
import org.oscarehr.ws.rest.to.model.DemographicTo1;

public class DemographicServiceTest extends BaseRestServiceTest {

	private static Logger logger = Logger.getLogger(DemographicServiceTest.class);

	/**
	 * Generates a new pre-populated random demographic
	 * 
	 * @return
	 * 		Returns a new demo instance
	 */
	protected static DemographicTo1 newRandomDemograpic() {
		DemographicTo1 demo = new DemographicTo1();
		populate(demo);
		demo.setDemographicNo(null); // should be generated by DB
		return demo;
	}

	@Test
	public void testDemoService() {
		if (!enabled) {
			logger.info("Tests are disabled");
			return;
		}

//		testCrud();
//		testMerge();
	}

//	public void testMerge() {
//		DemographicService demographicService = getResource(DemographicService.class);
//
//		DemographicTo1 parent = newRandomDemograpic();
//		RestResponse<DemographicTo1> response = demographicService.createDemographicData(parent);
//		assertSame(response.getStatus(), RestResponse.ResponseStatus.SUCCESS);
//
//		parent = response.getBody();
//		assertNotNull(parent.getDemographicNo());
//
//		DemographicTo1 child = newRandomDemograpic();
//		response = demographicService.createDemographicData(child);
//		assertSame(response.getStatus(), RestResponse.ResponseStatus.SUCCESS);
//
//		child = response.getBody();
//		assertNotNull(child.getDemographicNo());
//
//		Integer parentId = parent.getDemographicNo();
//		DemographicMergeService mergeService = getResource(DemographicMergeService.class);
//		OscarSearchResponse<DemographicMergedTo1> mergedResponse = mergeService.getMergedDemographicIds(parentId);
//		List<Integer> mergedIds = getMergedIds(mergedResponse);
//		assertTrue(mergedIds.isEmpty());
//
//		mergeService.mergeDemographic(parent.getDemographicNo(), child.getDemographicNo());
//		mergedResponse = mergeService.getMergedDemographicIds(parent.getDemographicNo());
//		assertTrue(getMergedIds(mergedResponse).contains(child.getDemographicNo()));
//
//		mergeService.unmergeDemographic(parentId, child.getDemographicNo());
//		mergedResponse = mergeService.getMergedDemographicIds(parent.getDemographicNo());
//		assertTrue(getMergedIds(mergedResponse).isEmpty());
//	}
//
//	private List<Integer> getMergedIds(OscarSearchResponse<DemographicMergedTo1> mergedResponse) {
//	    List<Integer> result = new ArrayList<Integer>();
//	    for(DemographicMergedTo1 to : mergedResponse.getContent()) {
//	    	result.add(to.getDemographicNo());
//	    }
//	    return result;
//    }

//	public void testCrud() {
//		DemographicService demographicService = getResource(DemographicService.class);
//
//		logger.info("REST Tests are enabled. Continuing...");
//
//		DemographicTo1 demo = newRandomDemograpic();
//		RestResponse<DemographicTo1> response = demographicService.createDemographicData(demo);
//		assertSame(response.getStatus(), RestResponse.ResponseStatus.SUCCESS);
//
//		demo = response.getBody();
//		assertNotNull(demo);
//		assertNotNull(demo.getDemographicNo());
//
//		/* test get all */
//		OscarSearchResponse<DemographicTo1> demographics = demographicService.getAllDemographics(0, 0); // find all
//		assertNotNull(demographics);
//
//		Integer demoId = demo.getDemographicNo();
//
//		boolean found = findDemographic(demographics, demoId) != null;
//		assertTrue(found);
//
//		/* test update demo */
//		String newFirstName = "NEW FIRST NAME";
//		demo.setFirstName(newFirstName);
//		demographicService.updateDemographicData(demo);
//		response = demographicService.getDemographicData(demoId);
//		assertSame(response.getStatus(), RestResponse.ResponseStatus.SUCCESS);
//
//		demo = response.getBody();
//		assertTrue(newFirstName.equals(demo.getFirstName()));
//
//		/* test delete demo */
//		response = demographicService.deleteDemographicData(demo.getDemographicNo());
//		assertSame(response.getStatus(), RestResponse.ResponseStatus.SUCCESS);
//
//		demo = response.getBody();
//		assertNotNull(demo);
//
//		demographics = demographicService.getAllDemographics(0, 0);
//		assertNull(findDemographic(demographics, demoId));
//	}

	/**
	 * Searches through demographic records to find record with the specified demographic id
	 * 
	 * @param demographics
	 * 		Demographics to search through
	 * @param demoId
	 * 		ID of the record to be found
	 * @return
	 * 		Returns the demographic record with the specified ID
	 */
	private DemographicTo1 findDemographic(OscarSearchResponse<DemographicTo1> demographics, Integer demoId) {
		if (demographics.getContent().isEmpty()) {
			return null;
		}

		for (DemographicTo1 d : demographics.getContent()) {
			if (d.getDemographicNo().equals(demoId)) {
				return d;
			}
		}
		return null;
	}

}
